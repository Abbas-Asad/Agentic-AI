processed_response: ProcessedResponse(new_items=[HandoffCallItem(agent=Agent(name='Assistant', instructions="You are a helpful assistant. Handoff to english agent if the user's query is related to english. Use tool when query is related to math.", handoff_description=None, handoffs=[Agent(name='English agent', instructions='You are english assistant. Answer user queries.', handoff_description=None, handoffs=[], model=None, model_settings=ModelSettings(temperature=None, top_p=None, frequency_penalty=None, presence_penalty=None, tool_choice=None, parallel_tool_calls=None, truncation=None, max_tokens=None, reasoning=None, metadata=None, store=None, include_usage=None, extra_query=None, extra_body=None, extra_headers=None), tools=[FunctionTool(name='define_noun', description='This will define noun', params_json_schema={'properties': {}, 'title': 'define_noun_args', 'type': 'object', 'additionalProperties': False, 'required': []}, on_invoke_tool=<function function_tool.<locals>._create_function_tool.<locals>._on_invoke_tool at 0x000001BBA4657E20>, strict_json_schema=True), FunctionTool(name='define_pronoun', description='This will define pronoun', params_json_schema={'properties': {}, 'title': 'define_pronoun_args', 'type': 'object', 'additionalProperties': False, 'required': []}, on_invoke_tool=<function function_tool.<locals>._create_function_tool.<locals>._on_invoke_tool at 0x000001BBA462C220>, strict_json_schema=True)], mcp_servers=[], mcp_config={}, input_guardrails=[], output_guardrails=[], output_type=None, hooks=None, tool_use_behavior='run_llm_again', reset_tool_choice=True)], model=None, model_settings=ModelSettings(temperature=None, top_p=None, frequency_penalty=None, presence_penalty=None, tool_choice=None, parallel_tool_calls=None, truncation=None, max_tokens=None, reasoning=None, metadata=None, store=None, include_usage=None, extra_query=None, extra_body=None, extra_headers=None), tools=[FunctionTool(name='add', description='This is a tool that adds two numbers\nArgs:\n    a: First number\n    b: Second number\nReturns:\n    Sum of two numbers', params_json_schema={'properties': {'a': {'title': 'A', 'type': 'integer'}, 'b': {'title': 'B', 'type': 'integer'}}, 'required': ['a', 'b'], 'title': 'add_args', 'type': 'object', 'additionalProperties': False}, on_invoke_tool=<function function_tool.<locals>._create_function_tool.<locals>._on_invoke_tool at 0x000001BBA4657600>, strict_json_schema=True), FunctionTool(name='subtract', description='This is a tool that subtracts two numbers\nArgs:\n    a: First number\n    b: Second number\nReturns:\n    Result of two numbers subtraction', params_json_schema={'properties': {'a': {'title': 'A', 'type': 'integer'}, 'b': {'title': 'B', 'type': 'integer'}}, 'required': ['a', 'b'], 'title': 'subtract_args', 'type': 'object', 'additionalProperties': False}, on_invoke_tool=<function function_tool.<locals>._create_function_tool.<locals>._on_invoke_tool at 0x000001BBA4657B00>, strict_json_schema=True)], mcp_servers=[], mcp_config={}, input_guardrails=[], output_guardrails=[], output_type=None, hooks=None, tool_use_behavior='run_llm_again', reset_tool_choice=True), raw_item=ResponseFunctionToolCall(arguments='{}', call_id='', name='transfer_to_english_agent', type='function_call', id='__fake_id__', status=None), type='handoff_call_item')], handoffs=[ToolRunHandoff(handoff=Handoff(tool_name='transfer_to_english_agent', tool_description='Handoff to the English agent agent to handle the request. ', input_json_schema={'additionalProperties': False, 'type': 'object', 'properties': {}, 'required': []}, on_invoke_handoff=<function handoff.<locals>._invoke_handoff at 0x000001BBA2603EC0>, agent_name='English agent', input_filter=None, strict_json_schema=True), tool_call=ResponseFunctionToolCall(arguments='{}', call_id='', name='transfer_to_english_agent', type='function_call', id='__fake_id__', status=None))], functions=[], computer_actions=[], local_shell_calls=[], tools_used=['transfer_to_english_agent'], mcp_approval_requests=[])